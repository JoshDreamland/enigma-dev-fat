# Awesomer Makefile generated by Rusky: stop relying on Bash hacks and automate more stuff
# It will automatically build the shared library out of any .cpp files in this directory or its
# subdirectories (recursively). It will also automatically calculate and update all dependencies
# automatically when 'make' is run, so there is no need to run genmake.sh EVER.

#################
# configuration #
#################
# TODO: better config process based on features rather than OS

CXX := g++
CXXFLAGS := -Wall

# Release/Debug
CXXFLAGS += -s -O3
# CXXFLAGS += -g

SOURCES := $(shell find -name '\*.cpp' -and ! -name 'standalone_\*')
OBJECTS := $(addprefix .eobjs/,$(SOURCES:.cpp=.o))
DEPENDENCIES := $(OBJECTS:.o=.d)

ifeq ($(wildcard .eobjs),)
# sort has the nice side effect of removing duplicates. this may or may not be faster.
# also, indenting this with a tab makes make think it's a command before a target
$(shell mkdir -p $(sort $(dir $(OBJECTS))))
endif

BASE = compileEGMf
OS := $(shell uname -s)
ifeq ($(OS), Linux)
	TARGET := ../lib$(BASE).so
	CXXFLAGS += -fPIC
else ifeq ($(OS), Darwin)
	TARGET := ../lib$(BASE).dylib
	CXXFLAGS += -fPIC
else
	TARGET := ../$(BASE).dll
	LDFLAGS += -static-libstdc++ -static-libgcc
endif

############
# building #
############

.PHONY: all clean

all: $(TARGET)

clean:
	$(RM) $(TARGET) $(OBJECTS) $(DEPENDENCIES)

$(TARGET): $(OBJECTS) Makefile
	$(CXX) -shared $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)

# GCC will figure out dependencies and write out makefile rules in %.d when they change
# -MMD outputs dependencies to %.d as a side effect of compilation, ignoring system headers
# -MP gives phony rules for non-target files, avoiding problems with missing files
DEPEND_OPTIONS = -MMD -MP -MT '.eobjs/$*.o' -MT '.eobjs/$*.d'

.eobjs/%.o .eobjs/%.d: %.cpp Makefile
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEPEND_OPTIONS) -c -o .eobjs/$*.o $<

ifneq ($(MAKECMDGOALS),clean)
-include $(DEPENDENCIES)
endif
